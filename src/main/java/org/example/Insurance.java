package org.example;

public class Insurance {

    public int calculateCost(int age) {

        int cost;
        {

            if (age >= 18 && age <= 29) {
                cost = 120;
            } else if (age >= 30 && age <= 65) {
                cost = 100;
            } else if (age >= 66 && age <= 79) {
                cost = 130;
            } else {
                return 0;
            }
            return cost;
        }
    }

}


//1.1` Создайте класс Insurance, реализующий в своем методе расчет
//        стоимости страховки по следующей логике. На вход метода подается
//        возраст клиента (целое число).
//        1.2 Если возраст в дипазоне [ 30 .. 65 ], то стоимость страховки
//        составляет 100 единиц.
//        1.3 Если возраст [18 .. 29], то стоимость страховки составляет
//        120 единиц.
//        1.4 Если возраст [66 .. 79], то стоимость страховки составляет
//        130 единиц.
//        1.5 В остальных случаях страховка не рассчитывается и
//        возвращается число 0.
//        2.1 Составьте чек-лист на тесты, покрывающие логику расчета
//        страховки в классе Insurance и оформите их в файле readme.
//        Должно быть 4 тестовых сценария с раличными тестовыми данными
//        2.2 Для создания тестовых данных применяйте методику классов
//        эквивалентности и граничных значений. Полученные тестовые данные
//        укажите с помощью аннотации @ValueSource для тестов